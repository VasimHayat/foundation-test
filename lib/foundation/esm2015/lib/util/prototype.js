/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FnDateFormatter } from './date';
// All String Prototype //
String.prototype.startsWith = (/**
 * @param {?} str
 * @return {?}
 */
function (str) {
    return this.indexOf(str) === 0;
});
String.prototype.getFirstChar = (/**
 * @return {?}
 */
function () {
    return this[0];
});
String.prototype.removeSpaces = (/**
 * @return {?}
 */
function () {
    return this.replace(/\s+/g, '');
});
String.prototype.endsWith = (/**
 * @param {?} suffix
 * @return {?}
 */
function (suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
});
String.prototype.codePointBefore = (/**
 * @param {?} strVal
 * @return {?}
 */
function (strVal) {
    return this.substr(0, this.indexOf(strVal));
});
String.prototype.insertCharAt = (/**
 * @param {?} index
 * @param {?} character
 * @return {?}
 */
function (index, character) {
    return this.substr(0, index) + character + this.substr(index + character.length);
});
String.prototype.replaceAll = (/**
 * @param {?} str1
 * @param {?} str2
 * @param {?} ignore
 * @return {?}
 */
function (str1, str2, ignore) {
    return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, '\\$&'), (ignore ? 'gi' : 'g')), (typeof (str2) === 'string') ?
        str2.replace(/\$/g, '$$$$') : str2);
});
String.prototype.capitalizeFirstLetter = (/**
 * @return {?}
 */
function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
});
String.prototype.includes = (/**
 * @return {?}
 */
function () {
    'use strict';
    return String.prototype.indexOf.apply(this, arguments) !== -1;
});
String.prototype.contains = (/**
 * @param {?} str
 * @param {?} startIndex
 * @return {?}
 */
function (str, startIndex) {
    return ''.indexOf.call(this, str, startIndex) !== -1;
});
// All Date Prototype //
Date.prototype.formatter = (/**
 * @param {?} formatterString
 * @param {?=} langId
 * @return {?}
 */
function (formatterString, langId) {
    return new FnDateFormatter().format(this, formatterString, langId);
});
Date.prototype.getCurrentDate = (/**
 * @return {?}
 */
function () {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate());
});
Date.prototype.offsetMntsToBusiDate = (/**
 * @param {?} minutes
 * @return {?}
 */
function (minutes) {
    /** @type {?} */
    const date = new Date(this.getFullYear(), this.getMonth(), this.getDate());
    date.setMinutes(minutes);
    return date;
});
Date.prototype.timeForZoneOffset = (/**
 * @param {?} offset
 * @return {?}
 */
function (offset) {
    /** @type {?} */
    const utc = this.getTime() + (this.getTimezoneOffset() * 60000);
    /** @type {?} */
    const newDate = new Date(utc + (3600000 * offset));
    return newDate;
});
Date.prototype.getWeek = (/**
 * @return {?}
 */
function () {
    /** @type {?} */
    const onejan = new Date(this.getFullYear(), 0, 1);
    return Math.ceil((((this - this.onejan) / 86400000) + onejan.getDay() + 1) / 7);
});
Date.prototype.dateOffset = (/**
 * @param {?} offset
 * @return {?}
 */
function (offset) {
    this.setDate(this.getDate() + offset);
    return this;
});
Date.prototype.getNextPrevDates = (/**
 * @param {?} numOfDays
 * @return {?}
 */
function (numOfDays) {
    /** @type {?} */
    const nextDate = this;
    if (numOfDays === undefined || numOfDays === 0) {
        return nextDate;
    }
    return new Date(nextDate.setDate(nextDate.getDate() + numOfDays));
});
Date.prototype.getMinutesOfDay = (/**
 * @return {?}
 */
function () {
    return (this.getHours() * 60) + this.getMinutes();
});
Date.prototype.getFormattedTime = (/**
 * @return {?}
 */
function () {
    return this.formatter('RIB');
});
Date.prototype.addDays = (/**
 * @param {?} days
 * @return {?}
 */
function (days) {
    if (!days) {
        return this;
    }
    console.log(this);
    /** @type {?} */
    const date = this;
    date.setDate(date.getDate() + days);
    return date;
});
Date.prototype.isToday = (/**
 * @return {?}
 */
function () {
    return this.isSameDate(new Date());
});
Date.prototype.clone = (/**
 * @return {?}
 */
function () {
    return new Date(+this);
});
Date.prototype.isAnotherMonth = (/**
 * @param {?} date
 * @return {?}
 */
function (date) {
    return date && this.getMonth() !== date.getMonth();
});
Date.prototype.isWeekend = (/**
 * @return {?}
 */
function () {
    return this.getDay() === 0 || this.getDay() === 6;
});
Date.prototype.isSameDate = (/**
 * @param {?} date
 * @return {?}
 */
function (date) {
    return date && this.getFullYear() === date.getFullYear() && this.getMonth() === date.getMonth() && this.getDate() === date.getDate();
});
//# sourceMappingURL=data:application/json;base64,