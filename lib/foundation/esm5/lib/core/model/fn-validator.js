/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EMAIL_REGEX, VALIDATOR_MAP } from './fn-form.constant';
/**
 * @param {?} i18nSvcs
 * @param {?} config
 * @return {?}
 */
export function FnPatternValidator(i18nSvcs, config) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var pattern = new RegExp("^" + config.pattern + "$");
        if ((pattern).test(control.value)) {
            return null;
        }
        else {
            return { valid: false, message: i18nSvcs.errorMessage(VALIDATOR_MAP.EMAIL, config.key) };
        }
    });
}
/**
 * @param {?} i18nSvcs
 * @param {?} config
 * @return {?}
 */
export function FnEmailValidator(i18nSvcs, config) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var pattern = config.pattern === undefined ? EMAIL_REGEX : new RegExp("^" + config.pattern + "$");
        if ((pattern).test(control.value)) {
            return null;
        }
        else {
            return { valid: false, message: i18nSvcs.errorMessage(VALIDATOR_MAP.EMAIL, config.key) };
        }
    });
}
/**
 * @param {?} i18nSvcs
 * @param {?} config
 * @return {?}
 */
export function FnRequireValidator(i18nSvcs, config) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (control.value !== undefined && control.value !== '') {
            return null;
        }
        else {
            return { valid: false, message: i18nSvcs.errorMessage(VALIDATOR_MAP.REQUIRED, config.key) };
        }
    });
}
/**
 * @param {?} i18nSvcs
 * @param {?} config
 * @return {?}
 */
export function FnMinValidator(i18nSvcs, config) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value || '';
        if (config.isRequired && value.length >= config.minLength) {
            return null;
        }
        else {
            return { valid: false, message: i18nSvcs.errorMessage(VALIDATOR_MAP.MIN_LENGTH, config.key) };
        }
    });
}
/**
 * @param {?} i18nSvcs
 * @param {?} config
 * @return {?}
 */
export function FnMaxValidator(i18nSvcs, config) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value || '';
        if (config.maxLength >= value.length) {
            return null;
        }
        else {
            return { valid: false, message: i18nSvcs.errorMessage(VALIDATOR_MAP.MIN_LENGTH, config.key) };
        }
    });
}
//# sourceMappingURL=data:application/json;base64,